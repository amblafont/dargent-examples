(*
This file is generated by Cogent

*)

theory Random_seed_SCorres_Normal
imports "Random_seed_Shallow_Normal"
"Random_seed_Deep_Normal"
"CogentShallow.Shallow_Tac"
begin

overloading
  valRel_SeedValue \<equiv> valRel
begin
  definition valRel_SeedValue: "\<And>\<xi> x v. valRel_SeedValue \<xi> (x :: ('t_seed, 't_value) SeedValue) v \<equiv> \<exists>f_seed f_value. v = VRecord [f_seed, f_value] \<and> valRel \<xi> (SeedValue.seed\<^sub>f x) f_seed \<and> valRel \<xi> (SeedValue.value\<^sub>f x) f_value"
end

lemmas valRel_records =
  valRel_SeedValue
  SeedValue.defs

context shallow begin

lemma scorres_struct_SeedValue :
  "\<And>\<gamma> \<xi> s_seed s_value d_seed d_value.
  scorres s_seed d_seed \<gamma> \<xi> \<Longrightarrow>
  scorres s_value d_value \<gamma> \<xi> \<Longrightarrow>
  scorres (SeedValue.make s_seed s_value) (Struct ts [d_seed, d_value]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_SeedValue SeedValue.defs elim!: v_sem_elims)
  done

lemmas scorres_structs =
  scorres_struct_SeedValue

lemma shallow_tac_rec_field_SeedValue__seed :
  "shallow_tac_rec_field \<xi> (SeedValue.seed\<^sub>f :: ('t_seed, 't_value) SeedValue \<Rightarrow> 't_seed) SeedValue.seed\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_SeedValue)
  done

lemma shallow_tac_rec_field_SeedValue__value :
  "shallow_tac_rec_field \<xi> (SeedValue.value\<^sub>f :: ('t_seed, 't_value) SeedValue \<Rightarrow> 't_value) SeedValue.value\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_SeedValue)
  done

lemmas scorres_rec_fields =
  shallow_tac_rec_field_SeedValue__seed
  shallow_tac_rec_field_SeedValue__value

local_setup \<open>
gen_scorres_lemmas "Random_seed_ShallowShared" "Random_seed_Shallow_Normal" "Random_seed_Deep_Normal" Cogent_abstract_functions Cogent_functions
\<close>


end

end
