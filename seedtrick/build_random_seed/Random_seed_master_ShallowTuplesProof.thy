(*
This file is generated by Cogent

*)

theory Random_seed_master_ShallowTuplesProof
imports "Random_seed_master_Shallow_Desugar"
"Random_seed_master_Shallow_Desugar_Tuples"
"CogentShallow.ShallowTuples"
begin

ML \<open>
structure ShallowTuplesRules_Random_seed_master =
  Named_Thms (
    val name = Binding.name "ShallowTuplesRules_Random_seed_master"
    val description = ""
  )
\<close>
setup \<open> ShallowTuplesRules_Random_seed_master.setup \<close>


ML \<open>
structure ShallowTuplesThms_Random_seed_master =
  Named_Thms (
    val name = Binding.name "ShallowTuplesThms_Random_seed_master"
    val description = ""
  )
\<close>
setup \<open> ShallowTuplesThms_Random_seed_master.setup \<close>


overloading shallow_tuples_rel_SeedValue \<equiv> shallow_tuples_rel begin
  definition "shallow_tuples_rel_SeedValue (x :: ('x1, 'x2) Random_seed_master_ShallowShared.SeedValue) (xt :: ('xt1, 'xt2) Random_seed_master_ShallowShared_Tuples.SeedValue) \<equiv>
    shallow_tuples_rel (Random_seed_master_ShallowShared.SeedValue.seed\<^sub>f x) (Random_seed_master_ShallowShared_Tuples.SeedValue.seed\<^sub>f xt) \<and>
    shallow_tuples_rel (Random_seed_master_ShallowShared.SeedValue.value\<^sub>f x) (Random_seed_master_ShallowShared_Tuples.SeedValue.value\<^sub>f xt)"
end
lemma shallow_tuples_rule_make__SeedValue [ShallowTuplesRules_Random_seed_master]:
  "\<lbrakk>
     shallow_tuples_rel x1 xt1;
     shallow_tuples_rel x2 xt2
  \<rbrakk> \<Longrightarrow> shallow_tuples_rel (Random_seed_master_ShallowShared.SeedValue.make x1 x2) \<lparr>Random_seed_master_ShallowShared_Tuples.SeedValue.seed\<^sub>f = xt1, value\<^sub>f = xt2\<rparr>"
  by (simp add: shallow_tuples_rel_SeedValue_def Random_seed_master_ShallowShared.SeedValue.defs Random_seed_master_ShallowShared_Tuples.SeedValue.defs)
lemma shallow_tuples_rule__SeedValue__seed\<^sub>f [ShallowTuplesThms_Random_seed_master]:
  "shallow_tuples_rel (x :: ('x1, 'x2) Random_seed_master_ShallowShared.SeedValue) (xt :: ('xt1, 'xt2) Random_seed_master_ShallowShared_Tuples.SeedValue) \<Longrightarrow>
   shallow_tuples_rel (Random_seed_master_ShallowShared.SeedValue.seed\<^sub>f x) (Random_seed_master_ShallowShared_Tuples.SeedValue.seed\<^sub>f xt)"
  by (simp add: shallow_tuples_rel_SeedValue_def)
lemma shallow_tuples_rule__SeedValue__value\<^sub>f [ShallowTuplesThms_Random_seed_master]:
  "shallow_tuples_rel (x :: ('x1, 'x2) Random_seed_master_ShallowShared.SeedValue) (xt :: ('xt1, 'xt2) Random_seed_master_ShallowShared_Tuples.SeedValue) \<Longrightarrow>
   shallow_tuples_rel (Random_seed_master_ShallowShared.SeedValue.value\<^sub>f x) (Random_seed_master_ShallowShared_Tuples.SeedValue.value\<^sub>f xt)"
  by (simp add: shallow_tuples_rel_SeedValue_def)
lemma shallow_tuples_rule__SeedValue__seed\<^sub>f__update [ShallowTuplesRules_Random_seed_master]:
  "\<lbrakk> shallow_tuples_rel (x :: ('x1, 'x2) Random_seed_master_ShallowShared.SeedValue) (xt :: ('xt1, 'xt2) Random_seed_master_ShallowShared_Tuples.SeedValue);
     shallow_tuples_rel v vt
   \<rbrakk> \<Longrightarrow>
   shallow_tuples_rel (Random_seed_master_ShallowShared.SeedValue.seed\<^sub>f_update (\<lambda>_. v) x) (Random_seed_master_ShallowShared_Tuples.SeedValue.seed\<^sub>f_update (\<lambda>_. vt) xt)"
  by (simp add: shallow_tuples_rel_SeedValue_def)
lemma shallow_tuples_rule__SeedValue__value\<^sub>f__update [ShallowTuplesRules_Random_seed_master]:
  "\<lbrakk> shallow_tuples_rel (x :: ('x1, 'x2) Random_seed_master_ShallowShared.SeedValue) (xt :: ('xt1, 'xt2) Random_seed_master_ShallowShared_Tuples.SeedValue);
     shallow_tuples_rel v vt
   \<rbrakk> \<Longrightarrow>
   shallow_tuples_rel (Random_seed_master_ShallowShared.SeedValue.value\<^sub>f_update (\<lambda>_. v) x) (Random_seed_master_ShallowShared_Tuples.SeedValue.value\<^sub>f_update (\<lambda>_. vt) xt)"
  by (simp add: shallow_tuples_rel_SeedValue_def)


lemma shallow_tuples__rand_with_seed [ShallowTuplesThms_Random_seed_master]:
  "shallow_tuples_rel Random_seed_master_ShallowShared.rand_with_seed Random_seed_master_ShallowShared_Tuples.rand_with_seed"
  sorry


lemma shallow_tuples__main [ShallowTuplesThms_Random_seed_master]:
  "shallow_tuples_rel Random_seed_master_Shallow_Desugar.main Random_seed_master_Shallow_Desugar_Tuples.main"
  apply (rule shallow_tuples_rel_funI)
  apply (unfold Random_seed_master_Shallow_Desugar.main_def Random_seed_master_Shallow_Desugar_Tuples.main_def id_def)
  apply ((unfold take\<^sub>c\<^sub>o\<^sub>g\<^sub>e\<^sub>n\<^sub>t_def Let\<^sub>d\<^sub>s_def Let_def split_def)?,(simp only: fst_conv snd_conv)?)
  by (assumption |
      rule shallow_tuples_basic_bucket ShallowTuplesRules_Random_seed_master
           ShallowTuplesThms_Random_seed_master ShallowTuplesThms_Random_seed_master[THEN shallow_tuples_rel_funD])+


end
