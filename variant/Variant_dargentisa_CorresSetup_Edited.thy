(*
This file is generated by Cogent

*)

theory Variant_dargentisa_CorresSetup_Edited
imports "CogentCRefinement.Deep_Embedding_Auto"
"CogentCRefinement.Cogent_Corres"
"CogentCRefinement.Tidy"
"CogentCRefinement.Heap_Relation_Generation"
"CogentCRefinement.Type_Relation_Generation"
"build_variant/Variant_dargentisa_ACInstall"
"build_variant/Variant_dargentisa_TypeProof"
"../Complements"
begin

(* C type and value relations *)

instantiation unit_t_C :: cogent_C_val
begin
  definition type_rel_unit_t_C_def: "\<And> r. type_rel r (_ :: unit_t_C itself) \<equiv> r = RUnit"
  definition val_rel_unit_t_C_def: "\<And> uv. val_rel uv (_ :: unit_t_C) \<equiv> uv = UUnit"
  instance ..
end

instantiation bool_t_C :: cogent_C_val
begin
definition type_rel_bool_t_C_def: "\<And> typ. type_rel typ (_ :: bool_t_C itself) \<equiv> (typ = RPrim Bool)"
definition val_rel_bool_t_C_def:
   "\<And> uv x. val_rel uv (x :: bool_t_C) \<equiv> (boolean_C x = 0 \<or> boolean_C x = 1) \<and>
     uv = UPrim (LBool (boolean_C x \<noteq> 0))"
instance ..
end
context update_sem_init begin
lemmas corres_if = corres_if_base[where bool_val' = boolean_C,
                     OF _ _ val_rel_bool_t_C_def[THEN meta_eq_to_obj_eq, THEN iffD1]]
end


(* C heap type class *)
class cogent_C_heap = cogent_C_val +
  fixes is_valid    :: "lifted_globals \<Rightarrow> 'a ptr \<Rightarrow> bool"
  fixes heap        :: "lifted_globals \<Rightarrow> 'a ptr \<Rightarrow> 'a"

(*
Non-generated
*)

ML 
\<open>
local
  val filename = "variant_dargentisa.c"
in
val uvals = read_table filename @{theory}
val g = get_callgraph @{theory} filename : callgraph
val heap_info = (Symtab.lookup (HeapInfo.get @{theory}) 
filename |> the  |> #heap_info)
end
\<close>

(* TODO: move this lemma in the C-parser library, where t1_C_updupd_same
is generated (c-parser/recursive_records/recursive_record_package.ML)
*)
lemma heap_t1_C_update_comp[simp]:
  " heap_t1_C_update f o heap_t1_C_update f' = heap_t1_C_update (f o f')"
  by fastforce

lemma heap_t1_C_update_if[simp] : "(if b then heap_t1_C_update f z else heap_t1_C_update g z) = 
  heap_t1_C_update (\<lambda> x. if b then f x else g x) z"
  by simp

context variant_dargentisa begin
(* Tidy the definitions of getters *)
local_setup \<open>generate_isa_getset_records g heap_info uvals  \<close>


end
(* For the type/value relation *)


(* We need the typeclass instances cogent_C_val for t2 *)
local_setup \<open> local_setup_val_rel_type_rel_put_them_in_buckets_for_types "variant_dargentisa.c" 
  ["t2_C", "t8_C"]\<close> 


(* obtained from the version without layout *)
instantiation t1_C :: cogent_C_val
begin
definition type_rel_t1_C_def[TypeRelSimp]: "\<And> typ. type_rel typ (_ :: t1_C itself) \<equiv> 
   \<exists>a b. typ = RRecord [a, b] \<and> type_rel a TYPE(t2_C) \<and> type_rel b TYPE(t8_C)"
definition val_rel_t1_C_def[GetSetSimp]:
    " val_rel uv (x :: t1_C) \<equiv> 
     \<exists>a b. uv = URecord [a, b] \<and> val_rel (fst a) 
(variant_dargentisa.deref_d3_get_a x) \<and> val_rel (fst b) (variant_dargentisa.deref_d9_get_b x)"
instance ..
end

(* This must be defined after value relations, which appear in the hypotheses *)
context variant_dargentisa begin



lemma get_set_a' : 
(* The value relation is only there to ensure that the tag
is the right one *)
  "val_rel x v \<Longrightarrow> deref_d3_get_a (deref_d27_set_a b v) = v"
  apply(simp add:deref_d3_get_a_def deref_d27_set_a_def)
  apply(cases v)
  apply simp
  apply(rule conjI)
   apply (simp add:ValRelSimp)
   apply blast   
  by (word_bitwise)

lemma get_set_a [GetSetSimp] : 
(* The value relation is only there to ensure that the tag
is the right one *)
  "val_rel x v \<Longrightarrow> val_rel x (deref_d3_get_a (deref_d27_set_a b v))"
  apply(simp add:get_set_a')
  done



lemma aux : "(UCAST(32 \<rightarrow> 8)
          ((data_C b.[4] && 0xFF00FFFF ||
            (0xFF && UCAST(8 \<rightarrow> 32)  x6 && 0xFF << 16) >>
            16) &&
           0xFF) = x6)"
  by word_bitwise

lemma get_set_b[GetSetSimp]  : "val_rel x v \<Longrightarrow> val_rel x (deref_d9_get_b (deref_d32_set_b b v))"
  apply(simp add:deref_d9_get_b_def deref_d32_set_b_def
)

  apply (simp add: ValRelSimp)
  apply (elim exE )
(*  this removes a lot of impossible cases  *)
  apply (simp add:TAG_ENUM_A_def TAG_ENUM_B_def TAG_ENUM_C_def TAG_ENUM_D_def TAG_ENUM_E_def )
  
  apply(cases v)

  apply (rule conjI impI)+
     apply(clarsimp)
    apply(clarsimp)
    apply(rule_tac P="val_rel uval" and a=x3  in back_subst )
     apply assumption
    apply word_bitwise
   apply clarsimp
   apply word_bitwise

  apply (rule conjI impI)+
     apply(clarsimp)
     apply word_bitwise

    apply(clarsimp)  
    apply(rule FalseE)
    apply word_bitwise
   apply clarsimp
   apply (rule conjI impI)+
    apply(rule_tac P="val_rel uval" and a=x4 in back_subst )
     apply assumption
    apply word_bitwise
   apply word_bitwise

  apply (rule conjI impI)+

     apply clarsimp
     apply word_bitwise
    apply clarsimp
    apply(rule FalseE)
    apply word_bitwise
   apply clarsimp
   apply (rule conjI impI)+
    apply word_bitwise
   apply (rule conjI impI)+
    apply(rule_tac P="val_rel uval" and a=x5 in back_subst )
     apply assumption
    apply word_bitwise
   apply (word_bitwise)

  apply (rule conjI impI)+
     apply clarsimp
     apply word_bitwise
    apply clarsimp
    apply(rule FalseE)
    apply word_bitwise
   apply clarsimp
   apply (rule conjI impI)+
    apply word_bitwise
   apply (rule conjI impI)+
    apply word_bitwise
   apply (rule conjI impI)+
    apply(rule_tac P="val_rel uval" and a=x6 in back_subst )
     apply assumption    
    apply (simp  add:aux)
   apply word_bitwise

  apply (rule conjI impI)+
    apply clarsimp
    apply word_bitwise
   apply clarsimp
   apply(rule FalseE)
   apply word_bitwise

  apply (rule conjI impI)+
    apply clarsimp
    apply word_bitwise
   apply clarsimp
   apply(rule FalseE)
   apply word_bitwise

  apply (rule conjI impI)+
    apply clarsimp
    apply word_bitwise
   apply clarsimp
   apply(rule FalseE)
   apply word_bitwise

  apply clarsimp
  apply (rule conjI impI)+
    
   apply word_bitwise
  apply (rule conjI impI)+

  apply(rule_tac P="val_rel uval" and a=x2 in back_subst )
   apply assumption
  apply word_bitwise
  done





lemma aux': "UCAST(32 \<rightarrow> 8) ((x && 0xFF00FFFF || 0x20000 >> 8) && 0xFF) =
    UCAST(32 \<rightarrow> 8) ((x >> 8) && 0xFF)"
  by word_bitwise

lemma stupid : "P \<Longrightarrow> (Q \<longrightarrow> P)"
  by fast

(* Is it enough, or would I need some weakening of this proposition, like above, introducing
some val_rel ? *)
lemma get_a_set_b[GetSetSimp] : "deref_d3_get_a (deref_d32_set_b b v) = deref_d3_get_a b"
  apply(simp add:deref_d3_get_a_def deref_d32_set_b_def
)
(* This removes contradictory cases, such as TAG_ENUM_B = TAG_ENUM_C *)
  apply (simp add:TAG_ENUM_A_def TAG_ENUM_B_def TAG_ENUM_C_def TAG_ENUM_D_def TAG_ENUM_E_def )
  apply (rule conjI impI)+  
(* why doesn't it work ? *)
   apply (word_bitwise)
   apply (simp add:aux')

  apply (rule stupid conjI)+
   apply word_bitwise
  apply (rule stupid conjI)+
   apply word_bitwise
  apply (rule stupid conjI)+
   apply word_bitwise
  apply (rule stupid conjI)+
  apply word_bitwise
  done

lemma get_b_set_a[GetSetSimp] : "deref_d9_get_b (deref_d27_set_a b v) = deref_d9_get_b b"
apply(simp add:deref_d9_get_b_def deref_d27_set_a_def)
(* This removes contradictory cases, such as TAG_ENUM_B = TAG_ENUM_C *)
  apply (simp add:TAG_ENUM_A_def TAG_ENUM_B_def TAG_ENUM_C_def TAG_ENUM_D_def TAG_ENUM_E_def )


  apply (rule conjI impI)+
   apply word_bitwise
  apply (rule conjI impI)+
   apply word_bitwise
  apply (rule conjI impI)+
   apply word_bitwise
  apply (rule conjI impI)+
   apply word_bitwise
  apply (rule conjI impI)+
   apply word_bitwise
  apply (rule conjI impI)+
   apply word_bitwise
  apply (rule conjI impI)+
   apply word_bitwise
  apply (rule conjI impI)+
   apply word_bitwise
  apply (rule conjI impI)+
   apply word_bitwise
  apply (rule conjI impI)+
   apply word_bitwise
  done



lemma d3_get_a_def_alt[GetSetSimp] : "d3_get_a' x' = do _ <- guard (\<lambda>s. is_valid_t1_C s x');
                                         gets (\<lambda>s. deref_d3_get_a (heap_t1_C s x')) 
                                      od"
  apply(simp add:deref_d3_get_a_def d3_get_a'_def')
  apply(simp add:L2opt unat_ucast_32_8)

  by monad_eq


lemma d9_get_b_def_alt[GetSetSimp] : "d9_get_b' x' = do _ <- guard (\<lambda>s. is_valid_t1_C s x');
                                         gets (\<lambda>s. deref_d9_get_b (heap_t1_C s x')) 
                                      od"
  apply(simp add:deref_d9_get_b_def d9_get_b'_def')
  apply(simp add:L2opt unat_ucast_32_8 unat_ucast_32_16 condition_cst)
  
  apply monad_eq
  done

lemma d27_set_a'_def_alt[GetSetSimp] :
"d27_set_a' ptr v = (do _ <- guard (\<lambda>s. is_valid_t1_C s ptr);
        modify (heap_t1_C_update (\<lambda>a. a(ptr := deref_d27_set_a (a ptr) v))) od )
"    
  apply(simp add:d27_set_a'_def' deref_d27_set_a_def)
  apply(simp add:L2opt)  
  apply monad_eq
  apply(simp add:comp_def)
  done

lemma d32_set_b'_def_alt[GetSetSimp] :
"d32_set_b' ptr v = (do _ <- guard (\<lambda>s. is_valid_t1_C s ptr);
        modify (heap_t1_C_update (\<lambda>a. a(ptr := deref_d32_set_b (a ptr) v))) od )
"        
   apply(simp add:d32_set_b'_def' deref_d32_set_b_def)
  apply(simp add:L2opt condition_cst)  
  apply monad_eq
  apply(simp add:comp_def)
  done
end



(* 
End of non-generated
*)

local_setup \<open> local_setup_val_rel_type_rel_put_them_in_buckets "variant_dargentisa.c" \<close>
local_setup \<open> local_setup_instantiate_cogent_C_heaps_store_them_in_buckets "variant_dargentisa.c" \<close>
locale Variant_dargentisa = "variant_dargentisa" + update_sem_init
begin

(* Relation between program heaps *)
definition
  heap_rel_ptr ::
  "(funtyp, abstyp, ptrtyp) store \<Rightarrow> lifted_globals \<Rightarrow>
   ('a :: cogent_C_heap) ptr \<Rightarrow> bool"
where
  "\<And> \<sigma> h p.
    heap_rel_ptr \<sigma> h p \<equiv>
   (\<forall> uv.
     \<sigma> (ptr_val p) = Some uv \<longrightarrow>
     type_rel (uval_repr uv) TYPE('a) \<longrightarrow>
     is_valid h p \<and> val_rel uv (heap h p))"

lemma heap_rel_ptr_meta:
  "heap_rel_ptr = heap_rel_meta is_valid heap"
  by (simp add: heap_rel_ptr_def[abs_def] heap_rel_meta_def[abs_def])

local_setup \<open> local_setup_heap_rel "variant_dargentisa.c" \<close>

definition state_rel :: "((funtyp, abstyp, ptrtyp) store \<times> lifted_globals) set"
where
  "state_rel  = {(\<sigma>, h). heap_rel \<sigma> h}"

lemmas val_rel_simps[ValRelSimp] =
  val_rel_word
  val_rel_ptr_def
  val_rel_unit_def
  val_rel_unit_t_C_def
  val_rel_bool_t_C_def
  val_rel_fun_tag

lemmas type_rel_simps[TypeRelSimp] =
  type_rel_word
  type_rel_ptr_def
  type_rel_unit_def
  type_rel_unit_t_C_def
  type_rel_bool_t_C_def

(* Generating the specialised take and put lemmas *)

local_setup \<open> local_setup_take_put_member_case_esac_specialised_lemmas "variant_dargentisa.c" \<close>
local_setup \<open> fold tidy_C_fun_def' Cogent_functions \<close>

end (* of locale *)


end
