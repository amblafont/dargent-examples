(*
This file is generated by Cogent

*)

theory U8rec_uabsfunsdeclfix_TypeProof
imports "Cogent.TypeProofGen"
"Cogent.AssocLookup"
begin

definition
  abbreviatedType1 :: " Cogent.type"
where
  "abbreviatedType1 \<equiv> TRecord [(''a'', (TPrim (Num U8), Present))] (Boxed Writable undefined)"

lemmas abbreviated_type_defs =
  abbreviatedType1_def

definition
  main_type :: " Cogent.kind list \<times>  Cogent.type \<times>  Cogent.type"
where
  "main_type \<equiv> ([], (abbreviatedType1, abbreviatedType1))"

definition
  main :: "string Cogent.expr"
where
  "main \<equiv> Let (Var 0) (Var 0)"

ML \<open>
val Cogent_functions = ["main"]
val Cogent_abstract_functions = []
\<close>

definition
  \<Xi> :: " string \<Rightarrow>  Cogent.kind list \<times>  Cogent.type \<times>  Cogent.type"
where
  "\<Xi> \<equiv> assoc_lookup [(''main'', main_type)] ([], TUnit, TUnit)"

definition
  "\<xi> \<equiv> assoc_lookup []"

definition
  "main_typetree \<equiv> TyTrSplit (Cons (Some TSK_L) []) [] TyTrLeaf [Some abbreviatedType1] TyTrLeaf"

ML \<open> open TTyping_Tactics \<close>

ML_quiet \<open>
val typing_helper_1_script : tac list = [
(ForceTac [@{thm kinding_def},@{thm kinding_all_def},@{thm kinding_variant_def},@{thm kinding_record_def}])
] \<close>


lemma typing_helper_1[unfolded abbreviated_type_defs] :
  "kinding [] abbreviatedType1 {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_1_script |> EVERY \<close>)
  done

ML_quiet \<open>
val main_typecorrect_script : hints treestep list = [
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepUp,
Val (TypingTacs []),
Val (TypingTacs []),
StepUp,
StepUp
] \<close>


ML_quiet \<open>
val main_ttyping_details_future = get_all_typing_details_future false @{context} "main"
   main_typecorrect_script
\<close>


lemma main_typecorrect :
  "\<Xi>, prod.fst main_type, (main_typetree, [Some (prod.fst (prod.snd main_type))]) T\<turnstile> main : prod.snd (prod.snd main_type)"
  apply (tactic \<open> resolve_future_typecorrect @{context} main_ttyping_details_future \<close>)
  done

ML_quiet \<open>
val (_, main_typing_tree, main_typing_bucket)
= Future.join main_ttyping_details_future
\<close>


end
