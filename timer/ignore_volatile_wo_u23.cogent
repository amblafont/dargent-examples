 -- in this file, I only mention the fields  used by the driver
-- and ignore the volatile stuff
type U2 = U8
type U3 = U8

cast82 : U8 -> U2
cast83 : U8 -> U3

timestamp_timebase_1_us : U8
timestamp_timebase_1_us = 1

timeout_timebase_1_ms : U8
timeout_timebase_1_ms = 3

ns_in_us : U64
ns_in_us = 1000


type Meson_timer_reg = {
   timer_a_mode : Bool,
   timer_a_en : Bool,
   timer_a_input_clk : U2,
   timer_e_input_clk : U3,
   timer_a : U32,
   timer_e : U32,
   timer_e_hi : U32
} layout record {
     timer_a_mode : 1b at 11b,
     timer_a_en : 1b at 15b,
     timer_a_input_clk : 8b at 56B,
     timer_e_input_clk : 8b at 57B,
     timer_a : 4B at 4B,
     timer_e : 4B at 72B, -- 4*18,
     timer_e_hi : 4B at 76B
} 

type Meson_timer = { 
  -- ignoring volatile
  regs : Meson_timer_reg,
  disable : Bool
}

-- instead of Meson_timer_config, we use VAddr as abstract type
-- it avoids unboxed abstract type in meson_init
type VAddr

-- (void *)((uintptr_t) config.vaddr + (TIMER_BASE + TIMER_REG_START * 4 - TIMER_MAP_BASE));
config_get_regs : VAddr! -> Meson_timer_reg

-- assume given non-null pointers?
meson_init : (Meson_timer take regs, VAddr!) -> Meson_timer
meson_init (timer, vaddr) =
  let regs = config_get_regs vaddr in 
    timer { regs = 
        regs { timer_a_en = True
             , timer_e = 0
             , timer_a_input_clk = cast82 timeout_timebase_1_ms
             , timer_e_input_clk = cast83 timestamp_timebase_1_us
          }
      }

meson_get_time : Meson_timer ! -> U64
meson_get_time timer =
  let initial_high : U64 = upcast timer.regs.timer_e_hi in
  let low : U64 = upcast timer.regs.timer_e in
  let high : U64 = upcast timer.regs.timer_e_hi in
  -- this is a trick to check that overflow did not happen
  -- it does not make sense without the volatile annotation of course
  let low' : U64 = if high /= initial_high then upcast timer.regs.timer_e else low in
  let ticks : U64 = (high << 32) .|. low' in
  let time : U64 = ticks * ns_in_us in 
   time

-- for linearity reason, this returns the timer
meson_set_timeout : (Meson_timer, U16, Bool) -> Meson_timer
meson_set_timeout (timer { regs }, timeout, periodic) =
   let regs' = regs { timer_a_mode = periodic, timer_a = upcast timeout } in       
   if timer.disable ! timer then        
       timer { regs = regs' { timer_a_en = True }, disable = False } 
   else 
       timer { regs = regs' } 

meson_stop_timer : Meson_timer -> Meson_timer
meson_stop_timer timer { regs } =
   timer { regs = regs { timer_a_en = False },
           disable = True }

main : Meson_timer_reg -> Meson_timer_reg
main r = r