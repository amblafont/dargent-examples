(*
This file is generated by Cogent

*)

theory Ex1_dargentisa_TypeProof
imports "Cogent.TypeProofGen"
"Cogent.AssocLookup"
begin

definition
  abbreviatedType1 :: " Cogent.type"
where
  "abbreviatedType1 \<equiv> TRecord [(''field0'', (TSum [(''Con0'', (TPrim Bool, Unchecked)), (''Con1'', (TPrim Bool, Unchecked))], Present)), (''field1'', (TRecord [(''field0'', (TRecord [(''field0'', (TRecord [(''field0'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TRecord [(''field0'', (TPrim Bool, Present)), (''field1'', (TPrim Bool, Present)), (''field2'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TRecord [(''field0'', (TRecord [(''field0'', (TRecord [(''field0'', (TRecord [(''field0'', (TPrim Bool, Present))] Unboxed, Present))] Unboxed, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (TRecord [(''field0'', (TPrim Bool, Present))] Unboxed, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present))] (Boxed Writable undefined)"

definition
  abbreviatedType2 :: " Cogent.type"
where
  "abbreviatedType2 \<equiv> TRecord [(''field0'', (TRecord [(''field0'', (TRecord [(''field0'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TRecord [(''field0'', (TPrim Bool, Present)), (''field1'', (TPrim Bool, Present)), (''field2'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TRecord [(''field0'', (TRecord [(''field0'', (TRecord [(''field0'', (TRecord [(''field0'', (TPrim Bool, Present))] Unboxed, Present))] Unboxed, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (TRecord [(''field0'', (TPrim Bool, Present))] Unboxed, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed"

definition
  abbreviatedType3 :: " Cogent.type"
where
  "abbreviatedType3 \<equiv> TRecord [(''field0'', (TPrim Bool, Present))] Unboxed"

definition
  abbreviatedType4 :: " Cogent.type"
where
  "abbreviatedType4 \<equiv> TRecord [(''field0'', (TRecord [(''field0'', (TRecord [(''field0'', (abbreviatedType3, Present))] Unboxed, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TPrim Bool, Present))] Unboxed"

definition
  abbreviatedType5 :: " Cogent.type"
where
  "abbreviatedType5 \<equiv> TRecord [(''field0'', (TRecord [(''field0'', (abbreviatedType3, Present))] Unboxed, Present)), (''field1'', (TPrim Bool, Present))] Unboxed"

definition
  abbreviatedType6 :: " Cogent.type"
where
  "abbreviatedType6 \<equiv> TRecord [(''field0'', (abbreviatedType3, Present))] Unboxed"

definition
  abbreviatedType7 :: " Cogent.type"
where
  "abbreviatedType7 \<equiv> TRecord [(''field0'', (abbreviatedType3, Present)), (''field1'', (TRecord [(''field0'', (TPrim Bool, Present)), (''field1'', (TPrim Bool, Present)), (''field2'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present))] Unboxed"

definition
  abbreviatedType8 :: " Cogent.type"
where
  "abbreviatedType8 \<equiv> TRecord [(''field0'', (TPrim Bool, Present)), (''field1'', (TPrim Bool, Present)), (''field2'', (TPrim Bool, Present))] Unboxed"

definition
  abbreviatedType9 :: " Cogent.type"
where
  "abbreviatedType9 \<equiv> TSum [(''Con0'', (TPrim Bool, Unchecked)), (''Con1'', (TPrim Bool, Unchecked))]"

definition
  abbreviatedType10 :: " Cogent.type"
where
  "abbreviatedType10 \<equiv> TRecord [(''field0'', (abbreviatedType9, Present)), (''field1'', (TRecord [(''field0'', (TRecord [(''field0'', (abbreviatedType3, Present)), (''field1'', (abbreviatedType8, Present)), (''field2'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TRecord [(''field0'', (TRecord [(''field0'', (abbreviatedType6, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present))] (Boxed Writable undefined)"

definition
  abbreviatedType11 :: " Cogent.type"
where
  "abbreviatedType11 \<equiv> TRecord [(''field0'', (TRecord [(''field0'', (abbreviatedType3, Present)), (''field1'', (abbreviatedType8, Present)), (''field2'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TRecord [(''field0'', (TRecord [(''field0'', (abbreviatedType6, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed"

definition
  abbreviatedType12 :: " Cogent.type"
where
  "abbreviatedType12 \<equiv> TRecord [(''field0'', (TRecord [(''field0'', (abbreviatedType6, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field1'', (TPrim Bool, Present))] Unboxed"

definition
  abbreviatedType13 :: " Cogent.type"
where
  "abbreviatedType13 \<equiv> TRecord [(''field0'', (abbreviatedType6, Present)), (''field1'', (TPrim Bool, Present))] Unboxed"

definition
  abbreviatedType14 :: " Cogent.type"
where
  "abbreviatedType14 \<equiv> TRecord [(''field0'', (abbreviatedType3, Present)), (''field1'', (abbreviatedType8, Present)), (''field2'', (TPrim Bool, Present))] Unboxed"

lemmas abbreviated_type_defs =
  abbreviatedType9_def
  abbreviatedType6_def
  abbreviatedType14_def
  abbreviatedType7_def
  abbreviatedType13_def
  abbreviatedType10_def
  abbreviatedType3_def
  abbreviatedType8_def
  abbreviatedType1_def
  abbreviatedType5_def
  abbreviatedType11_def
  abbreviatedType12_def
  abbreviatedType4_def
  abbreviatedType2_def

definition
  main_type :: " Cogent.kind list \<times>  Cogent.type \<times>  Cogent.type"
where
  "main_type \<equiv> ([], (TRecord [(''field0'', (abbreviatedType9, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present))] (Boxed Writable undefined), TRecord [(''field0'', (abbreviatedType9, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present))] (Boxed Writable undefined)))"

definition
  main :: "string Cogent.expr"
where
  "main \<equiv> Take (Var 0) 0 (Take (Var 1) 1 (Take (Var 1) 2 (Let (Put (Var 1) 0 (Var 4)) (Let (Put (Var 0) 1 (Var 3)) (Put (Var 0) 2 (Var 2))))))"

ML \<open>
val Cogent_functions = ["main"]
val Cogent_abstract_functions = []
\<close>

definition
  \<Xi> :: " string \<Rightarrow>  Cogent.kind list \<times>  Cogent.type \<times>  Cogent.type"
where
  "\<Xi> \<equiv> assoc_lookup [(''main'', main_type)] ([], TUnit, TUnit)"

definition
  "\<xi> \<equiv> assoc_lookup []"

definition
  "main_typetree \<equiv> TyTrSplit (Cons (Some TSK_L) []) [] TyTrLeaf [Some abbreviatedType9, Some (TRecord [(''field0'', (abbreviatedType9, Taken)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present))] (Boxed Writable undefined))] (TyTrSplit (Cons (Some TSK_R) (Cons (Some TSK_L) (Cons None []))) [] TyTrLeaf [Some (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed), Some (TRecord [(''field0'', (abbreviatedType9, Taken)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Taken)), (''field2'', (TPrim Bool, Present))] (Boxed Writable undefined))] (TyTrSplit (Cons (Some TSK_R) (Cons (Some TSK_L) (Cons (Some TSK_R) (append (replicate 2 None) [])))) [] TyTrLeaf [Some (TPrim Bool), Some (TRecord [(''field0'', (abbreviatedType9, Taken)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Taken)), (''field2'', (TPrim Bool, Taken))] (Boxed Writable undefined))] (TyTrSplit (Cons (Some TSK_R) (Cons (Some TSK_L) (Cons (Some TSK_R) (Cons None (Cons (Some TSK_L) (append (replicate 2 None) [])))))) [] TyTrLeaf [Some (TRecord [(''field0'', (abbreviatedType9, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Taken)), (''field2'', (TPrim Bool, Taken))] (Boxed Writable undefined))] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (Cons None (Cons (Some TSK_L) (append (replicate 4 None) []))))) [] TyTrLeaf [Some (TRecord [(''field0'', (abbreviatedType9, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Taken))] (Boxed Writable undefined))] TyTrLeaf))))"

ML \<open> open TTyping_Tactics \<close>

ML_quiet \<open>
val typing_helper_1_script : tac list = [
(ForceTac [@{thm kinding_def},@{thm kinding_all_def},@{thm kinding_variant_def},@{thm kinding_record_def}])
] \<close>


lemma typing_helper_1[unfolded abbreviated_type_defs] :
  "kinding [] (TRecord [(''field0'', (abbreviatedType9, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present))] (Boxed Writable undefined)) {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_1_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_2_script : tac list = [
(ForceTac [@{thm kinding_def},@{thm kinding_all_def},@{thm kinding_variant_def},@{thm kinding_record_def}])
] \<close>


lemma typing_helper_2[unfolded abbreviated_type_defs] :
  "kinding [] abbreviatedType9 {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_2_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_3_script : tac list = [
(ForceTac [@{thm kinding_def},@{thm kinding_all_def},@{thm kinding_variant_def},@{thm kinding_record_def}])
] \<close>


lemma typing_helper_3[unfolded abbreviated_type_defs] :
  "kinding [] (TRecord [(''field0'', (abbreviatedType9, Taken)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present))] (Boxed Writable undefined)) {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_3_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_4_script : tac list = [
(ForceTac [@{thm kinding_def},@{thm kinding_all_def},@{thm kinding_variant_def},@{thm kinding_record_def}])
] \<close>


lemma typing_helper_4[unfolded abbreviated_type_defs] :
  "kinding [] (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_4_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_5_script : tac list = [
(ForceTac [@{thm kinding_def},@{thm kinding_all_def},@{thm kinding_variant_def},@{thm kinding_record_def}])
] \<close>


lemma typing_helper_5[unfolded abbreviated_type_defs] :
  "kinding [] (TRecord [(''field0'', (abbreviatedType9, Taken)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Taken)), (''field2'', (TPrim Bool, Present))] (Boxed Writable undefined)) {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_5_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_6_script : tac list = [
(ForceTac [@{thm kinding_def},@{thm kinding_all_def},@{thm kinding_variant_def},@{thm kinding_record_def}])
] \<close>


lemma typing_helper_6[unfolded abbreviated_type_defs] :
  "kinding [] (TPrim Bool) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_6_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_7_script : tac list = [
(ForceTac [@{thm kinding_def},@{thm kinding_all_def},@{thm kinding_variant_def},@{thm kinding_record_def}])
] \<close>


lemma typing_helper_7[unfolded abbreviated_type_defs] :
  "kinding [] (TRecord [(''field0'', (abbreviatedType9, Taken)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Taken)), (''field2'', (TPrim Bool, Taken))] (Boxed Writable undefined)) {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_7_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_8_script : tac list = [
(ForceTac [@{thm kinding_def},@{thm kinding_all_def},@{thm kinding_variant_def},@{thm kinding_record_def}])
] \<close>


lemma typing_helper_8[unfolded abbreviated_type_defs] :
  "kinding [] (TRecord [(''field0'', (abbreviatedType9, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Taken)), (''field2'', (TPrim Bool, Taken))] (Boxed Writable undefined)) {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_8_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_9_script : tac list = [
(ForceTac [])
] \<close>


lemma typing_helper_9[unfolded abbreviated_type_defs] :
  "type_wellformed 0 (TRecord [(''field0'', (abbreviatedType9, Taken)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Taken)), (''field2'', (TPrim Bool, Taken))] (Boxed Writable undefined))"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_9_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_10_script : tac list = [
(ForceTac [])
] \<close>


lemma typing_helper_10[unfolded abbreviated_type_defs] :
  "type_wellformed 0 abbreviatedType9"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_10_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_11_script : tac list = [
(ForceTac [@{thm kinding_def},@{thm kinding_all_def},@{thm kinding_variant_def},@{thm kinding_record_def}])
] \<close>


lemma typing_helper_11[unfolded abbreviated_type_defs] :
  "kinding [] (TRecord [(''field0'', (abbreviatedType9, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Taken))] (Boxed Writable undefined)) {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_11_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_12_script : tac list = [
(ForceTac [])
] \<close>


lemma typing_helper_12[unfolded abbreviated_type_defs] :
  "type_wellformed 0 (TRecord [(''field0'', (abbreviatedType9, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Taken)), (''field2'', (TPrim Bool, Taken))] (Boxed Writable undefined))"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_12_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_13_script : tac list = [
(ForceTac [])
] \<close>


lemma typing_helper_13[unfolded abbreviated_type_defs] :
  "type_wellformed 0 (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed)"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_13_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_14_script : tac list = [
(ForceTac [])
] \<close>


lemma typing_helper_14[unfolded abbreviated_type_defs] :
  "type_wellformed 0 (TRecord [(''field0'', (abbreviatedType9, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType14, Present)), (''field1'', (TRecord [(''field0'', (abbreviatedType13, Present)), (''field1'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Present)), (''field3'', (TPrim Bool, Present)), (''field4'', (abbreviatedType3, Present)), (''field5'', (TPrim Bool, Present)), (''field6'', (TPrim Bool, Present))] Unboxed, Present)), (''field2'', (TPrim Bool, Taken))] (Boxed Writable undefined))"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_14_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_15_script : tac list = [
(ForceTac [])
] \<close>


lemma typing_helper_15[unfolded abbreviated_type_defs] :
  "type_wellformed 0 (TPrim Bool)"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_15_script |> EVERY \<close>)
  done

ML_quiet \<open>
val main_typecorrect_script : hints treestep list = [
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_2})]),
Val (KindingTacs [(RTac @{thm typing_helper_3})]),
StepUp,
Val (TypingTacs []),
Val (KindingTacs [(RTac @{thm typing_helper_2})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_4})]),
Val (KindingTacs [(RTac @{thm typing_helper_5})]),
StepUp,
Val (TypingTacs []),
Val (KindingTacs [(RTac @{thm typing_helper_4})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_6})]),
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs []),
Val (KindingTacs [(RTac @{thm typing_helper_6})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_8})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [NONE,SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_9})],NONE,SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_10})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_7}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_2}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_2}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_11})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_12})],NONE,SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_13})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_8}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_4}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_4}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_14})],NONE,SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_15})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_11}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_6}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_6}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp
] \<close>


ML_quiet \<open>
val main_ttyping_details_future = get_all_typing_details_future false @{context} "main"
   main_typecorrect_script
\<close>


lemma main_typecorrect :
  "\<Xi>, prod.fst main_type, (main_typetree, [Some (prod.fst (prod.snd main_type))]) T\<turnstile> main : prod.snd (prod.snd main_type)"
  apply (tactic \<open> resolve_future_typecorrect @{context} main_ttyping_details_future \<close>)
  done

ML_quiet \<open>
val (_, main_typing_tree, main_typing_bucket)
= Future.join main_ttyping_details_future
\<close>


end
